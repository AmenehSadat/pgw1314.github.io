<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Rclone挂载Google Drive</title>
      <link href="/2019/10/19/Rclone%E6%8C%82%E8%BD%BDGoogle-Drive/"/>
      <url>/2019/10/19/Rclone%E6%8C%82%E8%BD%BDGoogle-Drive/</url>
      
        <content type="html"><![CDATA[<p>先新建一个目录,用于挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mnt/moonagic</span><br></pre></td></tr></table></figure><p>挂载命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone mount moonagic: /mnt/moonagic --allow-other --allow-non-empty --vfs-cache-mode writes</span><br></pre></td></tr></table></figure><blockquote><p>其中moonagic:代表该服务中的目录，这里表示将名为moonagic的整个Google Drive盘都挂载。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Goole Drive </tag>
            
            <tag> Rclone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell判断文件是否存在</title>
      <link href="/2019/10/19/Shell%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/"/>
      <url>/2019/10/19/Shell%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/</url>
      
        <content type="html"><![CDATA[<p>shell判断文件,目录是否存在或者具有权限 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh </span></span><br><span class="line">myPath=<span class="string">"/var/log/httpd/"</span> </span><br><span class="line">myFile=<span class="string">"/var /log/httpd/access.log"</span></span><br></pre></td></tr></table></figure><p>这里的-x 参数判断$myPath是否存在并且是否具有可执行权限<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ ! -x <span class="string">"<span class="variable">$myPath</span>"</span>]; <span class="keyword">then</span> </span><br><span class="line">mkdir <span class="string">"<span class="variable">$myPath</span>"</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><br>这里的-d 参数判断$myPath是否存在<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$myPath</span>"</span>]; <span class="keyword">then</span> </span><br><span class="line">mkdir <span class="string">"<span class="variable">$myPath</span>"</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><br>这里的-f参数判断$myFile是否存在 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">"<span class="variable">$myFile</span>"</span> ]; <span class="keyword">then</span> </span><br><span class="line">touch <span class="string">"<span class="variable">$myFile</span>"</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>其他参数还有-n,-n是判断一个变量是否是否有值 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ ! -n <span class="string">"<span class="variable">$myVar</span>"</span> ]; <span class="keyword">then</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$myVar</span> is empty"</span> </span><br><span class="line"><span class="built_in">exit</span> 0 </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>两个变量判断是否相等 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$var1</span>"</span> = <span class="string">"<span class="variable">$var2</span>"</span> ]; <span class="keyword">then</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">'$var1 eq $var2'</span> </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">'$var1 not eq $var2'</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>-f 和-e的区别<br>Conditional Logic on Files </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-a file exists. </span><br><span class="line">-b file exists and is a block special file. </span><br><span class="line">-c file exists and is a character special file. </span><br><span class="line">-d file exists and is a directory. </span><br><span class="line">-e file exists (just the same as -a). </span><br><span class="line">-f file exists and is a regular file. </span><br><span class="line">-g file exists and has its setgid(2) bit <span class="built_in">set</span>. </span><br><span class="line">-G file exists and has the same group ID as this process. </span><br><span class="line">-k file exists and has its sticky bit <span class="built_in">set</span>. </span><br><span class="line">-L file exists and is a symbolic link. </span><br><span class="line">-n string length is not zero. </span><br><span class="line">-o Named option is <span class="built_in">set</span> on. </span><br><span class="line">-O file exists and is owned by the user ID of this process. </span><br><span class="line">-p file exists and is a first <span class="keyword">in</span>, first out (FIFO) special file or </span><br><span class="line">named pipe. </span><br><span class="line">-r file exists and is readable by the current process. </span><br><span class="line">-s file exists and has a size greater than zero. </span><br><span class="line">-S file exists and is a socket. </span><br><span class="line">-t file descriptor number fildes is open and associated with a </span><br><span class="line">terminal device. </span><br><span class="line">-u file exists and has its setuid(2) bit <span class="built_in">set</span>. </span><br><span class="line">-w file exists and is writable by the current process. </span><br><span class="line">-x file exists and is executable by the current process. </span><br><span class="line">-z string length is zero.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> 文件判断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crontab定时任务语法</title>
      <link href="/2019/10/19/crontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/10/19/crontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>crontab命令 被用来提交和管理用户的需要周期性执行的任务，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。</p><a id="more"></a><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>crontab(选项)(参数)</p><h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><ul><li>-e：编辑该用户的计时器设置；</li><li>-l：列出该用户的计时器设置；</li><li>-r：删除该用户的计时器设置；</li><li>-u&lt;用户名称&gt;：指定要设定计时器的用户名称。</li></ul><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>crontab文件：指定包含待执行任务的crontab文件。</p><h4 id="crontab文件的含义："><a href="#crontab文件的含义：" class="headerlink" title="crontab文件的含义："></a>crontab文件的含义：</h4><p>用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minute   hour   day   month   week   <span class="built_in">command</span>     顺序：分 时 日 月 周</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>minute： 表示分钟，可以是从0到59之间的任何整数。</li><li>hour：表示小时，可以是从0到23之间的任何整数。</li><li>day：表示日期，可以是从1到31之间的任何整数。</li><li>month：表示月份，可以是从1到12之间的任何整数。</li><li>week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。</li><li>command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。</li></ul><p>在以上各个字段中，还可以使用以下特殊字符：</p><ul><li>星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</li><li>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</li><li>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</li><li>正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</li></ul><h4 id="crond服务管理"><a href="#crond服务管理" class="headerlink" title="crond服务管理"></a>crond服务管理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/sbin/service crond start    <span class="comment"># 启动服务</span></span><br><span class="line">/sbin/service crond stop     <span class="comment"># 关闭服务</span></span><br><span class="line">/sbin/service crond restart  <span class="comment"># 重启服务</span></span><br><span class="line">/sbin/service crond reload   <span class="comment"># 重新载入配置</span></span><br></pre></td></tr></table></figure><h5 id="查看crontab服务状态："><a href="#查看crontab服务状态：" class="headerlink" title="查看crontab服务状态："></a>查看crontab服务状态：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond status</span><br></pre></td></tr></table></figure><h5 id="手动启动crontab服务："><a href="#手动启动crontab服务：" class="headerlink" title="手动启动crontab服务："></a>手动启动crontab服务：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond start</span><br></pre></td></tr></table></figure><h5 id="查看crontab服务是否已设置为开机启动，执行命令："><a href="#查看crontab服务是否已设置为开机启动，执行命令：" class="headerlink" title="查看crontab服务是否已设置为开机启动，执行命令："></a>查看crontab服务是否已设置为开机启动，执行命令：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntsysv</span><br></pre></td></tr></table></figure><h5 id="加入开机自动启动："><a href="#加入开机自动启动：" class="headerlink" title="加入开机自动启动："></a>加入开机自动启动：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig –level 35 crond on</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>每1分钟执行一次command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>每小时的第3和第15分钟执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 * * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>在上午8点到11点的第3和第15分钟执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>每隔两天的上午8点到11点的第3和第15分钟执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 */2 * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>每个星期一的上午8点到11点的第3和第15分钟执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * 1 <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>每晚的21:30重启smb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 21 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><p>每月1、10、22日的4 : 45重启smb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">45 4 1,10,22 * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><p>每周六、周日的1:10重启smb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 1 * * 6,0 /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><p>每天18 : 00至23 : 00之间每隔30分钟重启smb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,30 18-23 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><p>每星期六的晚上11:00 pm重启smb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 23 * * 6 /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><p>每一小时重启smb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* */1 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><p>晚上11点到早上7点之间，每隔一小时重启smb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 23-7/1 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><p>每月的4号与每周一到周三的11点重启smb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 11 4 * mon-wed /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><p>一月一号的4点重启smb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 4 1 jan * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><p>每小时执行/etc/cron.hourly目录内的脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">01 * * * * root run-parts /etc/cron.hourly</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell if判断</title>
      <link href="/2019/10/19/Shell-if%E5%88%A4%E6%96%AD/"/>
      <url>/2019/10/19/Shell-if%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p> 无论什么编程语言都离不开条件判断。SHELL也不例外。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> list <span class="keyword">then</span> </span><br><span class="line">  <span class="keyword">do</span> something here </span><br><span class="line"><span class="keyword">elif</span> list <span class="keyword">then</span> </span><br><span class="line">  <span class="keyword">do</span> another thing here </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"> <span class="keyword">do</span> something <span class="keyword">else</span> here </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SYSTEM=`uname -s`    <span class="comment">#获取操作系统类型，我本地是linux</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$SYSTEM</span> = <span class="string">"Linux"</span> ] ; <span class="keyword">then</span>     <span class="comment">#如果是linux的话打印linux字符串</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Linux"</span> </span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$SYSTEM</span> = <span class="string">"FreeBSD"</span> ] ; <span class="keyword">then</span>   </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"FreeBSD"</span> </span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$SYSTEM</span> = <span class="string">"Solaris"</span> ] ; <span class="keyword">then</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Solaris"</span> </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"What?"</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><strong>基本上和其他脚本语言一样。没有太大区别。不过值得注意的是。[]里面的条件判断。</strong></p><h4 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h4><h5 id="1、字符串判断"><a href="#1、字符串判断" class="headerlink" title="1、字符串判断"></a>1、字符串判断</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1 = str2　　　　　　当两个串有相同内容、长度时为真 </span><br><span class="line">str1 != str2　　　　　 当串str1和str2不等时为真 </span><br><span class="line">-n str1　　　　　　　 当串的长度大于0时为真(串非空) </span><br><span class="line">-z str1　　　　　　　 当串的长度为0时为真(空串) </span><br><span class="line">str1　　　　　　　　   当串str1为非空时为真</span><br></pre></td></tr></table></figure><h5 id="2、数字的判断"><a href="#2、数字的判断" class="headerlink" title="2、数字的判断"></a>2、数字的判断</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int1 -eq int2　　　　两数相等为真 </span><br><span class="line">int1 -ne int2　　　　两数不等为真 </span><br><span class="line">int1 -gt int2　　　　int1大于int2为真 </span><br><span class="line">int1 -ge int2　　　　int1大于等于int2为真 </span><br><span class="line">int1 -lt int2　　　　int1小于int2为真 </span><br><span class="line">int1 -le int2　　　　int1小于等于int2为真</span><br></pre></td></tr></table></figure><h5 id="3、文件的判断"><a href="#3、文件的判断" class="headerlink" title="3、文件的判断"></a>3、文件的判断</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-r file　　　　　用户可读为真 </span><br><span class="line">-w file　　　　　用户可写为真 </span><br><span class="line">-x file　　　　　用户可执行为真 </span><br><span class="line">-f file　　　　　文件为正规文件为真 </span><br><span class="line">-d file　　　　　文件为目录为真 </span><br><span class="line">-c file　　　　　文件为字符特殊文件为真 </span><br><span class="line">-b file　　　　　文件为块特殊文件为真 </span><br><span class="line">-s file　　　　　文件大小非0时为真 </span><br><span class="line">-t file　　　　　当文件描述符(默认为1)指定的设备为终端时为真</span><br></pre></td></tr></table></figure><h5 id="4、复杂逻辑判断"><a href="#4、复杂逻辑判断" class="headerlink" title="4、复杂逻辑判断"></a>4、复杂逻辑判断</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-a 　 　　　　　 与 </span><br><span class="line">-o　　　　　　　 或 </span><br><span class="line">!　　　　　　　　非</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> 条件判断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell提取字符串</title>
      <link href="/2019/10/19/Shell%E6%8F%90%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2019/10/19/Shell%E6%8F%90%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>鼓励将SHELL中变量全部用{} 括起来，便于阅读，防止变量名产生歧义。<br>假设我们定义了一个变量为：<br>file=/dir1/dir2/dir3/my.file.txt<br>我们可以用 ${ } 分别替换获得不同的值： </p><h4 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;file#*/&#125;</span>：拿掉第一条 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt </span><br><span class="line"><span class="variable">$&#123;file##*/&#125;</span>：拿掉最后一条 / 及其左边的字符串：my.file.txt </span><br><span class="line"><span class="variable">$&#123;file#*.&#125;</span>：拿掉第一个 . 及其左边的字符串：file.txt </span><br><span class="line"><span class="variable">$&#123;file##*.&#125;</span>：拿掉最后一个 . 及其左边的字符串：txt </span><br><span class="line"><span class="variable">$&#123;file%/*&#125;</span>：拿掉最后条 / 及其右边的字符串：/dir1/dir2/dir3 </span><br><span class="line"><span class="variable">$&#123;file%%/*&#125;</span>：拿掉第一条 / 及其右边的字符串：(空值) </span><br><span class="line"><span class="variable">$&#123;file%.*&#125;</span>：拿掉最后一个 . 及其右边的字符串：/dir1/dir2/dir3/my.file </span><br><span class="line"><span class="variable">$&#123;file%%.*&#125;</span>：拿掉第一个 . 及其右边的字符串：/dir1/dir2/dir3/my</span><br></pre></td></tr></table></figure><h4 id="记忆的方法："><a href="#记忆的方法：" class="headerlink" title="记忆的方法："></a>记忆的方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 是去掉左边(在鉴盘上 # 在 $ 之左边) </span><br><span class="line">% 是去掉右边(在鉴盘上 % 在 $ 之右边) </span><br><span class="line">单一符号是最小匹配﹔两个符号是最大匹配。</span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;file:0:5&#125;</span>：提取最左边的 5 个字节：/dir1 </span><br><span class="line"><span class="variable">$&#123;file:5:5&#125;</span>：提取第 5 个字节右边的连续 5 个字节：/dir2 </span><br><span class="line"></span><br><span class="line">我们也可以对变量值里的字符串作替换： </span><br><span class="line"><span class="variable">$&#123;file/dir/path&#125;</span>：将第一个 dir 提换为 path：/path1/dir2/dir3/my.file.txt </span><br><span class="line"><span class="variable">$&#123;file//dir/path&#125;</span>：将全部 dir 提换为 path：/path1/path2/path3/my.file.txt</span><br><span class="line"></span><br><span class="line">利用 <span class="variable">$&#123; &#125;</span> 还可针对不同的变量状态赋值(没设定、空值、非空值)： </span><br><span class="line"><span class="variable">$&#123;file-my.file.txt&#125;</span> ：假如 <span class="variable">$file</span> 为空值，则使用 my.file.txt 作默认值。(保留没设定及非空值) </span><br><span class="line"><span class="variable">$&#123;file:-my.file.txt&#125;</span> ：假如 <span class="variable">$file</span> 没有设定或为空值，则使用 my.file.txt 作默认值。 (保留非空值) </span><br><span class="line"><span class="variable">$&#123;file+my.file.txt&#125;</span> ：不管 <span class="variable">$file</span> 为何值，均使用 my.file.txt 作默认值。 (不保留任何值) </span><br><span class="line"><span class="variable">$&#123;file:+my.file.txt&#125;</span> ：除非 <span class="variable">$file</span> 为空值，否则使用 my.file.txt 作默认值。 (保留空值) </span><br><span class="line"><span class="variable">$&#123;file=my.file.txt&#125;</span> ：若 <span class="variable">$file</span> 没设定，则使用 my.file.txt 作默认值，同时将 <span class="variable">$file</span> 定义为非空值。 (保留空值及非空值) </span><br><span class="line"><span class="variable">$&#123;file:=my.file.txt&#125;</span> ：若 <span class="variable">$file</span> 没设定或为空值，则使用 my.file.txt 作默认值，同时将 <span class="variable">$file</span> 定义为非空值。 (保留非空值) </span><br><span class="line"><span class="variable">$&#123;file?my.file.txt&#125;</span> ：若 <span class="variable">$file</span> 没设定，则将 my.file.txt 输出至 STDERR。 (保留空值及非空值)) </span><br><span class="line"><span class="variable">$&#123;file:?my.file.txt&#125;</span> ：若 <span class="variable">$file</span> 没设定或为空值，则将 my.file.txt 输出至 STDERR。 (保留非空值) </span><br><span class="line"></span><br><span class="line">还有，<span class="variable">$&#123;#var&#125;</span> 可计算出变量值的长度： </span><br><span class="line"><span class="variable">$&#123;#file&#125;</span> 可得到 27 ，因为 /dir1/dir2/dir3/my.file.txt 刚好是 27 个字节...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> 提取字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.gitignore设置跟踪忽略文件夹中文件</title>
      <link href="/2019/10/19/gitignore%E8%AE%BE%E7%BD%AE%E8%B7%9F%E8%B8%AA%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E6%96%87%E4%BB%B6/"/>
      <url>/2019/10/19/gitignore%E8%AE%BE%E7%BD%AE%E8%B7%9F%E8%B8%AA%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="常用规则"><a href="#常用规则" class="headerlink" title="常用规则"></a>常用规则</h4><p> <img src="https://s2.ax1x.com/2019/10/19/KmL010.png" alt="常用规则"><br><strong>注意：</strong>如果你创建.gitignore文件之前就push了某一文件，那么即使你在.gitignore文件中写入过滤该文件的规则，该规则也不会起作用，git仍然会对该文件进行版本管理。</p><h4 id="配置语法"><a href="#配置语法" class="headerlink" title="配置语法"></a>配置语法</h4><ul><li>以斜杠“/”开头表示目录；</li><li>以星号“*”通配多个字符；</li><li>以问号“?”通配单个字符</li><li>以方括号“[]”包含单个字符的匹配列表；</li><li>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录。</li></ul><p><strong>注意：</strong> git 对于 .gitignore配置文件是按行从上到下进行规则匹配的</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ol><li>执行*[Rr]elease/*，忽略根目录下符合条件的文件夹下的所有文件</li><li>执行!<em>[Rr]elease/</em>.txt，追踪根目录下符合条件的文件夹下的txt文件</li><li>执行!*[Rr]elease/files/，追踪根目录下符合条件的文件夹下的files文件夹</li><li>执行*[Rr]elease/files/*，忽略files文件夹下的所有文件</li><li>执行!<em>[Rr]elease/files/</em>.txt，追踪files文件夹下的txt文件</li></ol><p>原文链接：<a href="https://blog.csdn.net/u011475134/article/details/71521725" target="_blank" rel="noopener">https://blog.csdn.net/u011475134/article/details/71521725</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git忽略文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本操作和错误</title>
      <link href="/2019/10/19/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%92%8C%E9%94%99%E8%AF%AF/"/>
      <url>/2019/10/19/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%92%8C%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="本地创建仓库操作"><a href="#本地创建仓库操作" class="headerlink" title="本地创建仓库操作"></a>本地创建仓库操作</h3><h4 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h4 id="将文件添加进Git"><a href="#将文件添加进Git" class="headerlink" title="将文件添加进Git"></a>将文件添加进Git</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名  </span><br><span class="line">git add . <span class="comment">#将所有的文件全部添加到Git</span></span><br></pre></td></tr></table></figure><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"描述信息"</span></span><br></pre></td></tr></table></figure><h4 id="删除文件或文件夹"><a href="#删除文件或文件夹" class="headerlink" title="删除文件或文件夹"></a>删除文件或文件夹</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached target              <span class="comment"># 删除target文件夹</span></span><br><span class="line">git commit -m <span class="string">'删除了target'</span>        <span class="comment"># 提交,添加操作说明</span></span><br></pre></td></tr></table></figure><h3 id="Git远程仓库操作"><a href="#Git远程仓库操作" class="headerlink" title="Git远程仓库操作"></a>Git远程仓库操作</h3><h4 id="创建SSH-Key"><a href="#创建SSH-Key" class="headerlink" title="创建SSH Key"></a>创建SSH Key</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br></pre></td></tr></table></figure><h4 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#git remote add 名称 远程仓库地址</span></span><br><span class="line">git remote add origin git@git.coding.net:pgw1314/shells.git</span><br></pre></td></tr></table></figure><h4 id="推送的远程仓库"><a href="#推送的远程仓库" class="headerlink" title="推送的远程仓库"></a>推送的远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#git push 仓库名  分支</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h4 id="更新远程仓库"><a href="#更新远程仓库" class="headerlink" title="更新远程仓库"></a>更新远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#git pull 仓库名 分支</span></span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><h4 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote remove 仓库名称</span><br></pre></td></tr></table></figure><h3 id="Git常见错误"><a href="#Git常见错误" class="headerlink" title="Git常见错误"></a>Git常见错误</h3><h5 id="版本冲突"><a href="#版本冲突" class="headerlink" title="版本冲突"></a>版本冲突</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">error: failed to push some refs to <span class="string">'git@git.coding.net:xx/xx.git'</span></span><br><span class="line"><span class="comment">#解决办法</span></span><br><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git基本操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome浏览器原生滚动截图</title>
      <link href="/2019/10/19/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%BB%9A%E5%8A%A8%E6%88%AA%E5%9B%BE/"/>
      <url>/2019/10/19/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%BB%9A%E5%8A%A8%E6%88%AA%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<ol><li>Ctrl+Shift+I（Windows）/F12 或者 Alt+Command+I（Mac）调出开发者工具</li><li>Ctrl+Shift +P(Windows) 或 Command+Shift+P(Mac)来打开命令行</li><li>在命令行中输入”Screen”，可以看到三个选项</li></ol><blockquote><p>整个网页（Capture full size screenshot）<br>节点网页（Capture node screenshot）<br>当前屏幕（Capture screenshot）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Chrome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
            <tag> Mac </tag>
            
            <tag> 屏幕截图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除Chrome地址栏记录的方法</title>
      <link href="/2019/10/19/%E5%88%A0%E9%99%A4Chrome%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2019/10/19/%E5%88%A0%E9%99%A4Chrome%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Mac快捷键：Shift + fn + Delete<br>Windows快捷键：Shift + Delete</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/19/hello-world/"/>
      <url>/2019/10/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
